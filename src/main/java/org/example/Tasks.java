package src;

import java.util.Random;

public class Tasks {

    // Задание 1
    public static void printThreeWords() {
        // Вывод слов Orange, Banana, Apple в консоль.
        // Каждое слово выводится с новой строки.
        System.out.println("Orange");
        System.out.println("Banana");
        System.out.println("Apple");
    }

    // Задание 2
    public static void checkSumSign() {
        // Объявление переменных a, b типа int со значениями 10 и -10
        int a = 10;
        int b = -10;

        // Объявление переменной checkSumAnswer типа String
        // Переменная используется для вывода суммы переменных a и b и сравнения суммы с 0
        // Вместо использования конструкции  if-else был использован тернарный оператора для облегчения конструкции
        String checkSumAnswer = (a + b >= 0) ? "Сумма положительная" : "Сумма отрицательная";

        // Вывод результата
        System.out.println(checkSumAnswer);
    }

    // Задание 3
    public static void printColor() {
        // Объявление переменной типа int и присвоение ей значения 50
        int value = 50;

        // Объявление оператора условия if-else

        if (value <= 0) { // Проверка условия на то, что значение переменной меньше, либо равно 0
            System.out.println("Красный"); // Вывод слова "Красный", если значение переменной value меньше либо равно 0
        } else if (value > 0 && value <= 100) { // Если значение переменной value больше 0 и при этом значение переменной меньше либо равно 100, то
            System.out.println("Желтый"); // Вывод слова "Желтый", если значение переменной value больше 0, но меньше, либо равно 100
        } else {
            System.out.println("Зелёный"); // В остальных случаях выводится слово "Зелёный"
        }
    }

    // Задание 4
    public static void compareNumbers() {
        // Объявление переменных a, b типа int со значениями 5 и 7
        int a = 5;
        int b = 7;

        // Объявление переменной compareNumberAnswer типа String
        // Переменная используется для вывода результата сравнения переменных a и b между собой
        // Вместо использования конструкции if-else был использован тернарный оператора для облегчения конструкции
        // Если значение переменной a больше либо равно b, то выводится результат "a >= b"
        // В противном случае идёт вывод "a < b"
        String compareNumberAnswer = (a >= b) ? "a >= b" : "a < b";
        // Вывод результата
        System.out.println(compareNumberAnswer);
    }

    // Задание 5
    public static boolean isSumInRange(int a, int b) {
        // Объявление переменной sum типа int
        // В переменной идёт сложение переменных a и b, которые передаются в метод в качестве параметров
        int sum = a + b;

        // Вместо использования конструкции if-else был использован тернарный оператора для облегчения конструкции
        // Если значение переменной sum больше либо равно 10 и при этом переменная sum меньше либо равно 20, то
        // Возвращается true, так как метод у нас типа boolean, в противном случае возвращается false
        return (sum >= 10 && sum <= 20) ? true : false;
    }

    // Задание 6
    public static void printPositiveOrNegativeNumber(int number) {
        // В качестве параметра в метод передаётся переменная number типа int
        // Если значение переменной number больше либо равно 0
        // Для сравнения значения переменной number используется условная конструкция if-else
        if (number >= 0) {
            // Идёт вывод о том, что переменная содержит в себе положительное значение
            System.out.println("Число " + number + " является положительным");
        } else { // В противном же случае идёт вывод о том, что переменная содержит в себе отрицательное значение
            System.out.println("Число " + number + " является отрицательным");
        }
    }

    //Задание 7
    public static boolean isNegativeNumber(int number) {
        // В качестве параметра в метод передаётся переменная number типа int
        // Если значение переменной number больше либо равно нулю, то возвращается true
        // В противном же случае возвращается false, так как метод у нас типа boolean
        return number >= 0;
    }

    //Задание 8
    public static void printStringMultipleTimes(String str, int count) {
        // В качестве параметров в метод передаётся переменная str типа String и переменная count типа int
        // По условию задачи, переменная str отвечает за строку, которую мы передаём в метод
        // Переменная count отвечает за то, сколько раз будет выведена переменная str

        // Для вывода переменной str был добавлен цикл for
        // int i = 0 - начальная точка цикла, i < count - условие выхода из цикла, i++ - оператор счётчика
        // В теле цикла for создаётся переменная i со значением 0, пока значение переменной не достигнет значения count,
        // прибавляя к ней по 1 и на каждом шаге будет записываться значение переменной str в консоль.
        for (int i = 0; i < count; i++) {
            System.out.println(str);
        }
    }

    //Задание 9
    public static boolean isLeapYear(int year) {
        // В качестве параметра метода передаётся переменная year типа int

        // Для выявления високосного года была использована конструкция if-else
        // Если переменная year (год) делится на 400 без остатка, то это високосный год
        if (year % 400 == 0) {
            return true;
            // Если год делится на 100, но не на 400, это НЕ високосный год
        } else if (year % 100 == 0) {
            return false;
            // Если год делится на 4, но не на 100, это високосный год. В противном случае — нет.
        } else {
            return year % 4 == 0;
        }
    }

    //Задание 10
    public static void invertBinaryArray(int[] array) {
        // Для замены значений массива на противоположные был добавлен цикл for
        // int i = 0 - начальная точка цикла, i < binaryArray.length (размер массива) - условие выхода из цикла, i++ - оператор счётчика
        // В теле цикла for создаётся переменная i со значением 0, пока значение переменной не достигнет значения binaryArray.length,
        // прибавляя к ней по 1 и на каждом шаге
        for (int i = 0; i < array.length; i++) {
            // Если значение i массива binaryArray равно 0
            if (array[i] == 0) {
                // заменяется на 1
                array[i] = 1;
                // В противном случае остаётся 0
            } else {
                array[i] = 0;
            }
        }
    }

    //Задание 11
    public static void fillArray() {
        // Объявляем одномерный массив array типа int, размерность массива это 100 элементов
        int[] array = new int[100];


        // Для заполнения массива числами от 1 до 100 используем цикл for
        // Начинаем цикл с переменной i, присвоив ей 0
        // Выполняем цикл, пока переменная i меньше длины массива array
        // Прибавляем к ней по 1 и на каждом шаге
        for (int i = 0; i < array.length; i++) {
            array[i] = i + 1;
        }
    }


    //Задание 12
    public static void processArray() {
        // Объявляем одномерный массив array типа int[]
        // Массив уже заполнен значениями по условию задания
        int[] array = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};

        // Для того чтобы пройтись по всем элементам массива используем цикл for
        // Начинаем цикл с переменной i, присвоив ей 0
        // Выполняем цикл, пока переменная i меньше длины массива array
        // Прибавляем к ней по 1 и на каждом шаге
        for (int i = 0; i < array.length; i++) {
            // Если значение элемента i массива array меньше 6
            if (array[i] < 6) {
                // То умножаем значение i на 2
                array[i] = array[i] * 2;
            }
        }
    }

    //Задание 13
    public static void fillDiagonals(int[][] array) {
        // В качестве параметра метода передаём двумерный массив array типа int[][]
        // Для того чтобы пройтись по всем элементам массива используем цикл for
        // Начинаем цикл с переменной i, присвоив ей 0
        // Выполняем цикл, пока переменная i меньше длины массива array
        // Прибавляем к ней по 1 и на каждом шаге
        for (int i = 0; i < array.length; i++) {
            // Присваиваем двум значениям i, которые отвечают значения элементов массива array за строку и столбец
            // значение в виде 1
            array[i][i] = 1;
        }
    }

    //Задание 14
    public static int[] initializeArray(int len, int initialValue) {
        // В качестве параметров метода передаём переменные len и initialValue типа int
        // Объявляем одномерный массив array типа int[]
        // Переменную len используем для указания размерности массива
        int[] array = new int[len];

        // Для того чтобы пройтись по всем элементам массива используем цикл for
        // Начинаем цикл с переменной i, присвоив ей 0
        // Выполняем цикл, пока переменная i меньше len (длины массива)
        // Прибавляем к ней по 1 и на каждом шаге
        for (int i = 0; i < len; i++) {
            // Присваиваем значению элемента i массива array значение переменной initialValue
            array[i] = initialValue;
        }
        return array;
    }

    public static void printArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    public static void print2DArray(int[][] array) {
        // Для вывода значений элементов массива был использован цикл for
        // Первый for отвечает за вывод строк
        for (int i = 0; i < array.length; i++) {
            // Второй for отвечает за вывод столбцов
            for (int j = 0; j < array[i].length; j++) {
                // При каждом действии выводим текущее значение i и j с пробелом
                System.out.print(array[i][j] + " ");
            }
            // После завершения цикла for оставляет пустую строку для перехода на новую
            System.out.println();
        }
    }

    public static int[] createBinaryArray(int size) {
        // В качестве параметра метода передаётся переменная size типа int
        // Идёт объявление одномерного массива binaryArray типа int
        // За размерность массива отвечает переменная size
        int[] binaryArray = new int[size];
        // Для того, чтобы массив заполнялся только 0 и 1 был использован класс Random
        // Создаётся экземпляр класса Random с именем random
        Random random = new Random();

        // Для заполнения массива числами 0 и 1 был добавлен цикл for
        // int i = 0 - начальная точка цикла, i < binaryArray.length (размер массива) - условие выхода из цикла, i++ - оператор счётчика
        // В теле цикла for создаётся переменная i со значением 0, пока значение переменной не достигнет значения binaryArray.length,
        // прибавляя к ней по 1 и на каждом шаге, массив binaryArray будет заполняться числами 0 или 1
        for (int i = 0; i < binaryArray.length; i++) {
            // Значение i массива binaryArray заполняется числами 0 или 1 благодаря экземпляру класса random с использованием
            // метода nextInt, 2 служит для ограничения двух значений 0 или 1
            binaryArray[i] = random.nextInt(2);
        }
        return binaryArray;
    }
}
